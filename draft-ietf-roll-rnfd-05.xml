<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version  -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6206 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6206.xml">
<!ENTITY RFC6550 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml">
<!ENTITY RFC6553 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6553.xml">
<!ENTITY RFC6554 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6554.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC4861 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4861.xml">
<!ENTITY RFC5184 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5184.xml">
<!ENTITY RFC6202 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6202.xml">
<!ENTITY RFC7102 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7102.xml">
<!ENTITY RFC7228 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7228.xml">
<!ENTITY RFC7416 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7416.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-roll-rnfd-05" category="std">

  <front>
    <title abbrev="RNFD">RNFD: Fast border router crash detection in RPL</title>

    <author initials="K." surname="Iwanicki" fullname="Konrad Iwanicki">
      <organization>University of Warsaw</organization>
      <address>
        <postal>
          <street>Banacha 2</street>
          <city>Warszawa</city>
          <code>02-097</code>
          <country>Poland</country>
        </postal>
        <phone>+48 22 55 44 428</phone>
        <email>iwanicki@mimuw.edu.pl</email>
      </address>
    </author>

    <date year="2025" month="February" day="03"/>

    <area>Internet</area>
    <workgroup>ROLL</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>By and large, a correct operation of a RPL network requires border routers to be up.
In many applications, it is beneficial for the nodes to detect a crash of a border router as soon as possible to trigger fallback actions.
This document describes RNFD, an extension to RPL that expedites border router failure detection, even by an order of magnitude, by having nodes collaboratively monitor the status of a given border router.
The extension introduces an additional state at each node, a new type of RPL Control Message Options for synchronizing this state among different nodes, and the coordination algorithm itself.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>RPL is an IPv6 routing protocol for low-power and lossy networks (LLNs) <xref target="RFC6550"/>.
Such networks are usually constrained in device energy and channel capacity.
They are formed largely of nodes that offer little processing power and memory, and links that are of variable qualities and support low data rates.
Therefore, a significant challenge that a routing protocol for LLNs has to address is minimizing resource consumption without sacrificing reaction time to network changes.</t>

<t>One of the main design principles adopted in RPL to minimize node resource consumption is delegating much of the responsibility for routing to LLN border routers (LBRs).
A network is organized into destination-oriented directed acyclic graphs (DODAGs), each corresponding to an LBR and having all its paths terminate at the LBR.
To this end, every node is dynamically assigned a rank representing its distance, measured in some metric, to a given LBR, with the LBR having the minimal rank, which reflects its role as the DODAG root.
The ranks allow each non-LBR node to select from among its neighbors (i.e., nodes to which the node has links) those ones that are closer to the LBR than the node itself: the node’s parents in the graph.
The resulting DODAG paths, consisting of the node-parent links, are utilized for routing packets upward: to the LBR and outside the LLN.
They are also used by nodes to periodically report their connectivity upward to the LBR, which allows in turn for directing packets downward, from the LBR to these nodes, for instance, by means of source routing <xref target="RFC6554"/>.
All in all, not only do LBRs participate in routing but also drive the process of DODAG construction and maintenance underlying the protocol.</t>

<t>To play this central role, LBRs are expected to be more capable than regular LLN nodes.
They are assumed not to be constrained in computing power, memory, and energy, which often entails a more involved hardware-software architecture and tethered power supply.
This, however, also makes them prone to failures, especially since in large deployments it is often difficult to ensure a backup power supply for every LBR.</t>

<section anchor="effects-of-lbr-crashes" title="Effects of LBR Crashes">

<t>When an LBR crashes, the nodes in its DODAG lose the ability to communicate with other Internet hosts.
In addition, a significant fraction of DODAG paths interconnecting the nodes become invalid, as they pass through the dead LBR.
The others also degenerate as a result of DODAG repair attempts, which are bound to fail.
In effect, routing inside the DODAG also becomes largely impossible.
Consequently, it is desirable that an LBR crash be detected by the nodes fast, so that they can leave the broken DODAG and join another one or trigger additional application- or deployment-dependent fallback mechanisms, thereby minimizing the negative impact of the disconnection.</t>

<t>Since all DODAG paths lead to the corresponding LBR, detecting its crash by a node entails dropping all parents and adopting an infinite rank, which reflects the node’s inability to reach the dead LBR.
Depending on the deployment settings, the node can then remain in such a state, join a different DODAG, or even become itself the root of a floating DODAG.
In any case, however, achieving this state for all nodes is slow, can generate heavy traffic, and is difficult to implement correctly <xref target="Iwanicki16"/> <xref target="Paszkowska19"/> <xref target="Ciolkosz19"/>.</t>

<t>To start with, tearing down all DODAG paths requires each of the dead LBR’s neighbors to detect that its link with the LBR is no longer up.
Otherwise, any of the neighbors unaware of this fact can keep advertising a finite rank and can thus be other nodes’ parent or ancestor in the DODAG: such nodes will incorrectly believe they have a valid path to the dead LBR.
Detecting a crash of a link by a node normally happens when the node has observed sufficiently many forwarding failures over the link.
Therefore, considering the low-data-rate applications of LLNs, the period from the crash to the moment of eliminating from the DODAG the last link to the dead LBR may be long.
Subsequently learning by all nodes that none of their links can form any path leading to the dead LBR also adds latency, partly due to parent changes that the nodes independently perform in attempts to repair their broken paths locally.
Since a non-LBR node has only local knowledge of the network, potentially inconsistent with that of other nodes, such parent changes often produce paths containing loops, which have to be broken before all nodes can conclude that no path to the dead LBR exists globally.
Even with RPL’s dedicated loop detection mechanisms <xref target="RFC6553"/>, this also requires traffic, and hence time.
Finally, switching a parent or discovering a loop can also generate cascaded bursts of control traffic, owing to the adaptive Trickle algorithm for exchanging DODAG information <xref target="RFC6202"/>.
Overall, the behavior of the network when handling an LBR crash is highly suboptimal, thereby not being in line with RPL’s goals of minimizing resource consumption and reaction latencies.</t>

</section>
<section anchor="design-principles" title="Design Principles">

<t>To address this issue, this document proposes an extension to RPL, dubbed Root Node Failure Detector (RNFD).
To minimize the time and traffic required to handle an LBR crash, the RNFD algorithm adopts the following design principles, derived directly from the previous observations:</t>

<t><list style="numbers">
  <t>Explicitly coordinating LBR monitoring between nodes instead of relying only on the emergent behavior resulting from their independent operation.</t>
  <t>Avoiding probing all links to the dead LBR so as to reduce the tail latency when eliminating these links from the DODAG.</t>
  <t>Exploiting concurrency by prompting proactive checking for a possible LBR crash when some nodes suspect such a failure may have taken place, which aims to further reduce the overall latency.</t>
  <t>Minimizing changes to RPL’s existing algorithms by operating in parallel and largely independently (in the background), and introducing few additional assumptions.</t>
</list></t>

<t>While these principles do improve RPL’s performance under a wide range of LBR crashes, their probabilistic nature precludes hard guarantees for all possible corner cases.
In particular, in some scenarios, RNFD’s operation may result in false negatives, but these situations are peculiar and will eventually be handled by RPL’s own aforementioned mechanisms.
Likewise, in some scenarios, notably involving highly unstable links, false positives may occur, but they can be alleviated as well.
In any case, the principles also guarantee that RNFD can be deactivated at any time, if needed, in which case RPL’s operation is unaffected.</t>

</section>
<section anchor="other-solutions" title="Other Solutions">

<t>Given the consequences of LBR failures, if possible, it is also worth considering other solutions to the problem.
More specifically, power outages can be alleviated by provisioning redundant power sources or emergency batteries.
Likewise, RPL’s so-called virtual DODAG roots can help tolerating some failures of individual LBRs.</t>

<t>As mentioned previously, RNFD has been designed to be largely independent of those solutions, that is, rather than aiming to be their replacement, it can complement them.
In particular, the operation of RNFD with different variants of virtual DODAG roots is covered in <xref target="mgmnt_virt_dodag_roots"/>.</t>

</section>
</section>
<section anchor="terms" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>

<t>The Terminology used in this document is consistent with and incorporates that described in “Terms Used in Routing for Low-Power and Lossy Networks (LLNs)” <xref target="RFC7102"/>, “RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks” <xref target="RFC6550"/>, and “The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams” <xref target="RFC6553"/>.
Other terms in use in LLNs can be found in “Terminology for Constrained-Node Networks” <xref target="RFC7228"/>.</t>

<t>In particular, the following acronyms appear in the document:</t>

<t><list style="hanging">
  <t hangText='DIO'>
  DODAG Information Object (a RPL message)</t>
  <t hangText='DIS'>
  DODAG Information Solicitation (a RPL message)</t>
  <t hangText='DODAG'>
  Destination-Oriented Directed Acyclic Graph</t>
  <t hangText='LLN'>
  Low-power and Lossy Network</t>
  <t hangText='LBR'>
  LLN Border Router</t>
</list></t>

<t>In addition, the document introduces the following concepts:</t>

<t><list style="hanging">
  <t hangText='Sentinel'>
  One of the two roles that a node can play in RNFD. For a given DODAG Version, a Sentinel node is a DODAG root’s neighbor that monitors the DODAG root’s status. There are normally multiple Sentinels for a DODAG root. However, being the DODAG root’s neighbor need not imply being Sentinel.</t>
  <t hangText='Acceptor'>
  The other of the two roles that a node can play in RNFD. For a given DODAG Version, an Acceptor node is a node that is not Sentinel.</t>
  <t hangText='Locally Observed DODAG Root’s State (LORS)'>
  A node’s local knowledge of the DODAG root’s status, specifying in particular whether the DODAG root is up.</t>
  <t hangText='Conflict-Free Replicated Counter (CFRC)'>
  Conceptually represents a dynamic set whose cardinality can be estimated. It defines a partial order on its values and supports element addition and union. The union operation is order- and duplicate-insensitive, that is, idempotent, commutative, and associative.</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>As mentioned previously, LBRs are DODAG roots in RPL, and hence a crash of an LBR is global in that it affects all nodes in the corresponding DODAG.
Therefore, each node running RNFD for a given DODAG explicitly tracks the DODAG root’s current condition, which is referred to as Locally Observed DODAG Root’s State (LORS), and synchronizes its local knowledge with other nodes.</t>

<t>Since monitoring the condition of the DODAG root is performed by tracking the status of its links (i.e., whether they are up or down), it must be done by the root’s neighbors; other nodes must accept their observations.
Consequently, depending on their roles, non-root nodes are divided in RNFD into two disjoint groups: Sentinels and Acceptors.
A Sentinel node is the DODAG root’s neighbor that monitors its link with the root.
The DODAG root thus normally has multiple Sentinels but being its neighbor need not imply being Sentinel.
An Acceptor node is in turn a node that is not Sentinel.
Acceptors thus mainly collect and propagate Sentinels’ observations.
More information on Sentinel selection can be found in <xref target="mgmnt_roles_and_cfrc_lens"/>.</t>

<section anchor="protocol-state-machine" title="Protocol State Machine">

<t>The possible values of LORS and transitions between them are depicted in <xref target="fig_state_machine"/>.
States “UP” and “GLOBALLY DOWN” can be attained by both Sentinels and Acceptors; states “SUSPECTED DOWN” and “LOCALLY DOWN” — by Sentinels only.</t>

<figure title="RNFD States and Transitions" anchor="fig_state_machine"><artwork><![CDATA[
  +---------------------------------------------------------+
  |                      |---------------------------+   3a |
  |    +-----------------+---------+              3b |      |
  |    | 2b              |         v                 v      v
+-+----+-+   1 +---------+-+     +-----------+     +-+------+-+
|   UP   +---->+ SUSPECTED +---->+  LOCALLY  +---->+ GLOBALLY |
|        +<----+    DOWN   | 2a  |    DOWN   | 3c  |   DOWN   |
+-+----+-+  4a +-----------+     +-+---------+     +-+--------+
  ^    ^                           |                 |
  |    |                        4b |                 |
  |    +---------------------------+               5 |
  +--------------------------------------------------+

]]></artwork></figure>

<t>To begin with, when any node joins a DODAG Version, the DODAG root must appear alive, so the node initializes RNFD with its LORS equal to “UP”.
For a properly working DODAG root, the node remains in state “UP”.</t>

<t>However, when a node — acting as Sentinel — starts suspecting that the root may have crashed, it changes its LORS to “SUSPECTED DOWN” (transition 1 in <xref target="fig_state_machine"/>).
The transition from “UP” to “SUSPECTED DOWN” can happen based on the node’s observations at either the data plane, for instance, link-layer triggers about missing hop-by-hop acknowledgments for packets forwarded over the node’s link to the root, or the control plane, for example, a significant growth in the number of Sentinels already suspecting the root to be dead.
In state “SUSPECTED DOWN”, the Sentinel node may verify its suspicion and/or inform other nodes about the suspicion.
When this has been done, it changes its LORS to “LOCALLY DOWN” (transition 2a).
In some cases, the verification need not be performed and, as an optimization, a direct transition from “UP” to “LOCALLY DOWN” (transition 2b) can be done instead.</t>

<t>If sufficiently many Sentinels have their LORS equal to “LOCALLY DOWN”, all nodes — Sentinels and Acceptors — consent globally that the DODAG root must have crashed and set their LORS to “GLOBALLY DOWN”, irrespective of the previous value (transitions 3a, 3b, and 3c).
State “GLOBALLY DOWN” is terminal in that the only transition any node can perform from this to another state (transition 5) takes place when the node joins a new DODAG version.
When a node is in state “GLOBALLY DOWN”, RNFD forces RPL to maintain an infinite rank and no parent, thereby preventing routing packets upward in the DODAG.
In other words, this state represents a situation in which all non-root nodes agree that the current DODAG version is unusable, and hence, to recover, the root has to give a proof of being alive by initiating a new DODAG Version.</t>

<t>In contrast, if a node — either Sentinel or Acceptor — is in state “UP”, RNFD does not influence RPL’s packet forwarding: a node can route packets upward if it has a parent.
The same is true for states “SUSPECTED DOWN” and “LOCALLY DOWN”, attainable only by Sentinels.
Finally, while in any of the two states, a Sentinel node may observe some activity of the DODAG root, and hence decide that its suspicion is a mistake.
In such a case, it returns to state “UP” (transitions 4a and 4b).</t>

</section>
<section anchor="counters-and-communication" title="Counters and Communication">

<t>To enable arriving at a global conclusion that the DODAG root has crashed (i.e., transiting to state “GLOBALLY DOWN”), all nodes count locally and synchronize among each other the number of Sentinels considering the root to be dead (i.e., those in state “LOCALLY DOWN”).
This process employs structures referred to as conflict-free replicated counters (CFRCs).
They are stored and modified independently by each node and are disseminated throughout the network in options added to RPL link-local control messages: DODAG Information Objects (DIOs) and DODAG Information Solicitations (DISs).
Upon reception of such an option from its neighbor, a node merges the received counter with its local one, thereby obtaining a new content for its local counter.</t>

<t>The merging operation is idempotent, commutative, and associative.
Moreover, all possible counter values are partially ordered.
This enables ensuring eventual consistency of the counters across all nodes, irrespective of the particular sequence of merges, shape of the DODAG, or general network topology.</t>

<t>Each node in RNFD maintains two CFRCs for a DODAG:</t>

<t><list style="symbols">
  <t>PositiveCFRC, counting Sentinels that consider or have previously considered the root node as alive in the current DODAG Version,</t>
  <t>NegativeCFRC, counting Sentinels that consider or have previously considered the root node as dead in the current DODAG Version.</t>
</list></t>

<t>PositiveCFRC is always greater than or equal to the NegativeCFRC in terms of the partial order defined for the counters.
The difference between the value of PositiveCFRC and the value of NegativeCFRC is thus nonnegative and estimates the number of Sentinels that still consider the DODAG root node as alive.</t>

</section>
</section>
<section anchor="the-rnfd-option" title="The RNFD Option">

<t>RNFD state synchronization between nodes takes place through the RNFD Option.
It is a new type of RPL Control Message Options that is carried in link-local RPL control messages, notably DIOs and DISs.
Its main task is allowing the receivers to merge their two CFRCs with the sender’s CFRCs.</t>

<section anchor="general-cfrc-requirements" title="General CFRC Requirements">

<t>CFRCs in RNFD MUST support the following operations:</t>

<t><list style="hanging">
  <t hangText='value(c)'>
  Returns a nonnegative integer value corresponding to the number of nodes counted by a given CFRC, c.</t>
  <t hangText='zero()'>
  Returns a CFRC that counts no nodes, that is, has its value equal to 0.</t>
  <t hangText='self()'>
  Returns a CFRC that counts only the node executing the operation.</t>
  <t hangText='infinity()'>
  Returns a CFRC that counts all possible nodes and represents a special value, infinity.</t>
  <t hangText='merge(c1, c2)'>
  Returns a CFRC that is a union of c1 and c2 (i.e., counts all nodes that are counted by either c1, c2, or both c1 and c2).</t>
  <t hangText='compare(c1, c2)'>
  Returns the result of comparing c1 to c2.</t>
  <t hangText='saturated(c)'>
  Returns TRUE if a given CFRC, c, is saturated (i.e., no more new nodes should be counted by it) or FALSE otherwise.</t>
</list></t>

<t>The partial ordering of CFRCs implies that the result of compare(c1, c2) can be either:</t>

<t><list style="symbols">
  <t>smaller, if c1 is ordered before c2 (i.e., c2 counts all nodes that c1 counts and at least one node that c1 does not count);</t>
  <t>greater, if c1 is ordered after c2 (i.e., c1 counts all nodes that c2 counts and at least one node that c2 does not count);</t>
  <t>equal, if c1 and c2 are the same (i.e., they count the same nodes);</t>
  <t>incomparable, otherwise.</t>
</list></t>

<t>In particular, zero() is smaller than all other values and infinity() is greater than any other value.</t>

<t>The properties of merging in turn can be formalized as follows for any c1, c2, and c3:</t>

<t><list style="symbols">
  <t>idempotence: c1 = merge(c1, c1);</t>
  <t>commutativity: merge(c1, c2) = merge(c2, c1);</t>
  <t>associativity: merge(c1, merge(c2, c3)) = merge(merge(c1, c2), c3).</t>
</list></t>

<t>In particular, merge(c, zero()) always equals c while merge(c, infinity()) always equals infinity().</t>

<t>There are many algorithmic structures that can provide the aforementioned properties of CFRC.
Although in principle RNFD does not rely on any specific one, the option adopts so-called linear counting <xref target="Whang90"/>.</t>

</section>
<section anchor="msg_format" title="Format of the Option">

<t>The format of the RNFD Option conforms to the generic format of RPL Control Message Options:</t>

<figure title="Format of the RNFD Option" anchor="fig_opt_format"><artwork><![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |   Type = TBD1 | Option Length |                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
  |                                                               |
  +                                                               +
  |               PosCFRC, NegCFRC (Variable Length*)             |
  .                                                               .
  .                                                               .
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The '*' denotes that, if present, the fields have equal lengths.
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='Option Type'>
  TBD1</t>
  <t hangText='Option Length'>
  8-bit unsigned integer. Denotes the length of the option in octets excluding the Option Type and Option Length fields. Its value MUST be even. A value of 0 denotes that RNFD is disabled in the current DODAG Version.</t>
  <t hangText='PosCFRC, NegCFRC'>
  Two variable-length, octet-aligned bit arrays carrying the sender’s PositiveCFRC and NegativeCFRC, respectively.</t>
</list></t>

<t>The length of the arrays constituting the PosCFRC and NegCFRC fields is the same and is derived from Option Length as follows.
The value of Option Length is divided by 2 to obtain the number of octets each of the two arrays occupies.
The resulting number of octets is multiplied by 8 which yields an upper bound on the number of bits in each array.
As the actual bit length of each of the arrays, the largest prime number less than the upper bound is assumed.
For example, if the value of Option Length is 16, then each array occupies 8 octets, and its actual bit length is 61, as this is the largest prime number less than 64.</t>

<t>Furthermore, for any bit equal to 1 in the NegCFRC, the bit with the same index MUST be equal to 1 also in the PosCFRC.
Any unused bits (i.e., the bits beyond the actual bit length of each of the arrays) MUST be equal to 0.
Finally, if PosCFRC has all its bits equal to 1, then NegCFRC MUST also have all its bits equal to 1.</t>

<t>The CFRC operations are defined for such bit arrays of a given length as follows:</t>

<t><list style="hanging">
  <t hangText='value(c)'>
  Returns the smallest integer value not less than -LT*ln(L0/LT), where ln() is the natural logarithm function, L0 is the number of bits equal to 0 in the array corresponding to <spanx style="verb">c</spanx> and LT is the bit length of the array.</t>
  <t hangText='zero()'>
  Returns an array with all bits equal to 0.</t>
  <t hangText='self()'>
  Returns an array with a single bit, selected uniformly at random, equal to 1.</t>
  <t hangText='infinity()'>
  Returns an array with all bits equal to 1.</t>
  <t hangText='merge(c1, c2)'>
  Returns a bit array that constitutes a bitwise OR of c1 and c2, that is, a bit in the resulting array is equal to 0 only if the same bit is equal to 0 in both c1 and c2.</t>
  <t hangText='compare(c1, c2)'>
  Returns:</t>
</list></t>

<t><list style="symbols">
  <t>equal if each bit of c1 is equal to the corresponding bit of c2;</t>
  <t>less if c1 and c2 are not equal and, for each bit equal to 1 in c1, the corresponding bit in c2 is also equal to 1;</t>
  <t>greater if c1 and c2 are not equal and, for each bit equal to 1 in c2, the corresponding bit in c1 is also equal to 1;</t>
  <t>incomparable, otherwise.</t>
</list></t>

<t><list style="hanging">
  <t hangText='saturated(c)'>
  Returns TRUE, if more than RNFD_CFRC_SATURATION_THRESHOLD of the bits in c are equal to 1, or FALSE, otherwise.</t>
</list></t>

</section>
</section>
<section anchor="rnfd_behavior" title="RPL Router Behavior">

<t>Although RNFD operates largely independently of RPL, it does need interact with RPL and the overall protocol stack.
These interactions are described next and can be realized, for instance, by means of event triggers.</t>

<section anchor="rnfd_behavior_roles" title="Joining a DODAG Version and Changing the RNFD Role">

<t>Whenever RPL running at a node joins a DODAG Version, RNFD — if active — MUST assume for the node the role of Acceptor.
Accordingly, it MUST set its LORS to “UP” and its PositiveCFRC and NegativeCFRC to zero().</t>

<t>The role may then change between Acceptor and Sentinel at any time.
However, while a switch from Sentinel to Acceptor has no preconditions, for a switch from Acceptor to Sentinel to be possible, <spanx style="emph">all</spanx> of the following conditions MUST hold:</t>

<t><list style="numbers">
  <t>LORS is “UP”;</t>
  <t>saturated(PositiveCFRC) is FALSE;</t>
  <t>a neighbor entry for the DODAG root is present in RPL’s DODAG parent set;</t>
  <t>the neighbor is considered reachable via its link-local IPv6 address.</t>
</list></t>

<t>A role change also requires appropriate updates to LORS and CFRCs, so that the node is properly accounted for.
More specifically, when changing its role from Acceptor to Sentinel, the node MUST add itself to its PositiveCFRC as follows.
It MUST generate a new CFRC value, selfc = self(), and MUST replace its PositiveCFRC, denoted oldpc, with newpc = merge(oldpc, selfc).
In contrast, the effects of a switch from Sentinel to Acceptor vary depending on the node’s value of LORS before the switch:</t>

<t><list style="symbols">
  <t>for “GLOBALLY DOWN”, the node MUST NOT modify its LORS, PositiveCFRC, and NegativeCFRC;</t>
  <t>for “LOCALLY DOWN”, the node MUST set its LORS to “UP” but MUST NOT modify its PositiveCFRC and NegativeCFRC;</t>
  <t>for “UP” and “SUSPECTED DOWN”, the node MUST set its LORS to “UP”, MUST NOT modify it PositiveCFRC, but MUST add itself to NegativeCFRC, that is, replace its NegativeCFRC, denoted oldnc, with newnc = merge(oldnc, selfc), where selfc is the counter generated with self() when the node last added itself to its PositiveCFRC.</t>
</list></t>

</section>
<section anchor="rnfd_behavior_detection" title="Detecting and Verifying Problems with the DODAG Root">

<t>Only nodes that are Sentinels take active part in detecting crashes of the DODAG Root; Acceptors just disseminate their observations, reflected in the CFRCs.</t>

<t>The DODAG root monitoring SHOULD be based on both internal inputs, notably the values of CFRCs and LORS, and external inputs, such as triggers from RPL and other protocols.
External input monitoring SHOULD be performed preferably in a reactive fashion, also independently of RPL, and at both data plane and control plane.
In particular, it is RECOMMENDED that RNFD be directly notified of events relevant to the routing adjacency maintenance mechanisms on which RPL relies, such as Layer 2 triggers <xref target="RFC5184"/> or the Neighbor Unreachability Detection <xref target="RFC4861"/> mechanism.
In addition, depending on the underlying protocol stack, there may be other potential sources of such events, for instance, neighbor communication overhearing.
In any case, only events concerning the DODAG root need be monitored.
For example, RNFD can conclude that there may be problems with the DODAG root if it observes a lack of multiple consecutive L2 acknowledgments for packets transmitted by the node via the link to the DODAG root.
Internally, in turn, it is RECOMMENDED that RNFD take action whenever there is a change to its local CFRCs, so that a node can have a chance to participate in detecting potential problems even when normally it would not exchange packets over the link with the DODAG root during some period.
In particular, RNFD SHOULD conclude that there may be problems with the DODAG root, when the fraction value(NegativeCFRC)/value(PositiveCFRC) has grown by at least RNFD_SUSPICION_GROWTH_THRESHOLD since the node last set its LORS to “UP”.</t>

<t>Whenever having its LORS set to “UP” RNFD concludes — based on either external or internal inputs — that there may be problems with the link with the DODAG root, it MUST set its LORS to either “SUSPECTED DOWN” or, as an optimization, to “LOCALLY DOWN”.</t>

<t>The “SUSPECTED DOWN” value of LORS is temporary: its aim is to give RNFD an additional opportunity to verify whether the link with the DODAG root is indeed down.
Depending on the outcome of such verification, RNFD MUST set its LORS to either “UP”, if the link has been confirmed not to be down, or “LOCALLY DOWN”, otherwise.
The verification can be performed, for example, by transmitting RPL DIS or ICMPv6 Echo Request messages to the DODAG root’s link-local IPv6 address and expecting replies confirming that the root is up and reachable through the link.
Care SHOULD be taken not to overload the DODAG root with traffic due to simultaneous probes, for instance, random backoffs can be employed to this end.
It is RECOMMENDED that the “SUSPECTED DOWN” value of LORS is attained and verification takes place if RNFD’s conclusion on the state of the DODAG root is based only on indirect observations, for example, the aforementioned growth of the CFRC values.
In contrast, for direct observations, such as missing L2 acknowledgments, the verification MAY be skipped, with the node’s LORS effectively changing from “UP” directly to “LOCALLY DOWN”.</t>

<t>For consistency with RPL, when detecting potential problems with the DODAG root, RNFD also MUST make use of RPL’s independent knowledge.
More specifically, a node MUST switch its LORS from “UP” or “SUSPECTED DOWN” directly to “LOCALLY DOWN” if a neighbor entry for the DODAG root is removed from RPL’s DODAG parent set or the neighbor ceases to be considered reachable via its link-local IPv6 address.</t>

<t>Finally, while having its LORS already equal to “LOCALLY DOWN”, a node may make an observation confirming that its link with the DODAG root is actually up.
In such a case, it SHOULD set its LORS back to “UP” but MUST NOT do this before the previous conditions 2–4 necessary for a node to change its role from Acceptor to Sentinel all hold (see <xref target="rnfd_behavior_roles"/>).</t>

<t>To appropriately account for the node’s observations on the state of the DODAG root, the aforementioned LORS transitions are accompanied by changes to the node’s local CFRCs as follows.
Transitions between “UP” and “SUSPECTED DOWN” do not affect any of the two CFRCs.
During a switch from “UP” or “SUSPECTED DOWN” to “LOCALLY DOWN”, in turn, the node MUST add itself to its NegativeCFRC, as explained previously.
By symmetry, if there is a transition from “LOCALLY DOWN” to “UP”, the node MUST add itself to its PositiveCFRC, again, as explained previously.</t>

<t>Such changes to a node’s local CFRCs, if performed repeatedly due to incorrect decisions regarding the status of the node’s link with the DODAG root, may lead to those CFRCs becoming saturated.
An implementation SHOULD thus try to minimize false-positive transitions from “UP” and “SUSPECTED DOWN” to “LOCALLY DOWN”.
The exact approach depends on the specific solutions employed for assessing the state of a link.
For instance, one can utilize additional mechanisms for increasing the confidence of individual decisions, such as during the aforementioned verification in the “SUSPECTED DOWN” state, or can limit the number of transitions per node, possibly in an adaptive fashion.</t>

</section>
<section anchor="rnfd_behavior_consensus" title="Disseminating Observations and Reaching Agreement">

<t>Nodes disseminate their observations by exchanging CFRCs in the RNFD Options embedded in link-local RPL control messages, notably DIOs and DISs.
When processing such a received option, a node — acting as Sentinel or Acceptor — MUST update its PositiveCFRC and NegativeCFRC to respectively newpc = merge(oldpc, recvpc) and newnc = merge(oldnc, recvnc), where oldpc and oldnc are the values of the node’s PositiveCFRC and NegativeCFRC before the update, while recvpc and recvnc are the received values of option fields PosCFRC and NegCFRC, respectively.</t>

<t>In effect, the node’s value of fraction value(NegativeCFRC)/value(PositiveCFRC) may change.
If the fraction reaches at least RNFD_CONSENSUS_THRESHOLD (with value(PositiveCFRC) being greater than zero), then the node consents on the DODAG root being down.
Accordingly, it MUST change its LORS to “GLOBALLY DOWN” and set its PositiveCFRC and NegativeCFRC both to infinity().</t>

<t>The “GLOBALLY DOWN” value of LORS is terminal: the node MUST NOT change it and MUST NOT modify its CFRCs until it joins a new DODAG Version.
With this value of LORS, RNFD at the node MUST also prevent RPL from having any DODAG parent and advertising any Rank other than INFINITE_RANK.</t>

<t>Since the RNFD Option is embedded, among others, in RPL DIO control messages, updates to a node’s CFRCs may affect the sending schedule of these messages, which is driven by the DIO Trickle timer <xref target="RFC6206"/>.
It is RECOMMENDED to use for RNFD a dedicated Trickle timer, different from RPL’s original DIO Trickle timer.
In such a setting, whenever the dedicated timer fires and no DIO message containing the RNFD Option has been sent to the link-local all-RPL-nodes multicast IPv6 address since the previous firing, the node sends a DIO message containing the RNFD Option to the address.
In contrast, in the absence of the dedicated Trickle timer for RNFD, an implementation SHOULD ensure that the RNFD Option is present in multicast DIO messages sufficiently often to quickly propagate changes to the node’s CFRCs, and notably as soon as possible after a reset of the timer triggered by RNFD.
In the remainder of this document, we will refer to the Trickle timer utilized by RNFD — either the dedicated one or RPL’s original one, depending on the implementation — simply as “Trickle timer”.
In particular, a node MUST reset its Trickle timer when it changes its LORS to “GLOBALLY DOWN”, so that information about the detected crash of the DODAG root is disseminated in the DODAG fast.
Likewise, a node SHOULD reset its Trickle timer when any of its local CFRCs changes significantly.</t>

</section>
<section anchor="rnfd_behavior_root" title="DODAG Root’s Behavior">

<t>The DODAG root node MUST assume the role of Acceptor in RNFD and MUST NOT ever switch this role.
It MUST also monitor its LORS and local CFRCs, so that it can react to various events.</t>

<t>To start with, the DODAG root MUST generate a new DODAG Version, thereby restarting the protocol, if it changes its LORS to “GLOBALLY DOWN”, which may happen when the root has restarted after a crash or the nodes have falsely detected its crash.
It MAY also generate a new DODAG Version if fraction value(NegativeCFRC)/value(PositiveCFRC) approaches RNFD_CONSENSUS_THRESHOLD, so as to avoid potential interruptions to routing.</t>

<t>Furthermore, the DODAG root SHOULD either generate a new DODAG Version or increase the bit length of its CFRCs if saturated(PositiveCFRC) becomes TRUE.
This is a self-regulation mechanism that helps adjust the CFRCs to a potentially large number of Sentinels (see <xref target="mgmnt_roles_and_cfrc_lens"/>).</t>

<t>In general, issuing a new DODAG Version effectively restarts RNFD.
The DODAG root MAY thus perform this operation also in other situations.</t>

</section>
<section anchor="rnfd_behavior_deactivation" title="Activating and Deactivating the Protocol on Demand">

<t>RNFD can be activated and deactivated on demand, once per DODAG Version.
The particular policies for activating and deactivating the protocol are outside the scope of this document.
However, the activation and deactivation SHOULD be done at the DODAG root node; other nodes MUST comply.</t>

<t>More specifically, when a non-root node joins a DODAG Version, RNFD at the node is initially inactive.
The node MUST NOT activate the protocol unless it receives for this DODAG Version a valid RNFD Option containing some CFRCs, that is, having its Option Length field positive.
In particular, if the option accompanies the message that causes the node to join the DODAG Version, the protocol MUST be active from the moment of the joining.
RNFD then remains active at the node until it is explicitly deactivated or the node joins a new DODAG Version.
An explicit deactivation MUST take place when the node receives an RNFD Option for the DODAG Version with no CFRCs, that is, having its Option Length field equal to zero.
When explicitly deactivated, RNFD MUST NOT be reactivated unless the node joins a new DODAG Version.
In particular, when the first RNFD Option received by the node has its Option Length field equal to zero, the protocol MUST remain deactivated for the entire time the node belongs to the current DODAG Version.</t>

<t>When RNFD at a node is initially inactive for a DODAG Version, the node MUST NOT attach any RNFD Option to the messages it sends (in particular, because it may not know the desired CFRC length — see <xref target="rnfd_behavior_cfrc_size"/>).
When the protocol has been explicitly deactivated, the node MAY also decide not to attach the option to its outgoing messages.
However, it is RECOMMENDED that it sends sufficiently many messages with the option to the link-local all-RPL-nodes multicast IPv6 address to allow its neighbors to learn that RNFD has been deactivated in the current DODAG version.
In particular, it MAY reset its Trickle timer to this end but also MAY use some reactive mechanisms, for example, replying with a unicast DIO or DIS containing the RNFD Option with no CFRCs to a message from a neighbor that contains the option with some CFRCs, as such a neighbor appears not to have learned about the deactivation of RNFD.</t>

</section>
<section anchor="rnfd_behavior_cfrc_size" title="Processing CFRCs of Incompatible Lengths">

<t>The merge() and compare() operations on CFRCs require both arguments to be compatible, that is, to have the same bit length.
However, the processing rules for the RNFD Option (see <xref target="msg_format"/>) do not necessitate this.
This fact is made use of not only in the mechanisms for activating and deactivating the protocol (see <xref target="rnfd_behavior_deactivation"/>), but also in mechanisms for dynamic adjustments of CFRCs, which aim to enable deployment-specific policies (see <xref target="mgmnt_roles_and_cfrc_lens"/>).
A node thus MUST be prepared to receive the RNFD Option with fields PosCFRC and NegCFRC of a different bit length than the node’s own PositiveCFRC and NegativeCFRC.
Assuming that it has RNFD active and that fields PosCFRC and NegCFRC in the option have a positive length, the node MUST react as follows.</t>

<t>If the bit length of fields PosCFRC and NegCFRC is the same as that of the node’s local PositiveCFRC and NegativeCFRC, then the node MUST perform the merges, as detailed previously (see <xref target="rnfd_behavior_consensus"/>).</t>

<t>If the bit length of fields PosCFRC and NegCFRC is smaller than that of the node’s local PositiveCFRC and NegativeCFRC, then the node MUST ignore the option and MAY reset its Trickle timer.</t>

<t>If the bit length of fields PosCFRC and NegCFRC is greater than that of the node’s local PositiveCFRC and NegativeCFRC, then the node MUST extend the bit length of its local CFRCs to be equal to that in the option and set the CFRCs as follows:</t>

<t><list style="symbols">
  <t>If the node’s LORS is “GLOBALLY DOWN”, then both its local CFRCs MUST be set to infinity().</t>
  <t>Otherwise, they both MUST be set to zero(), and the node MUST account for itself in so initialized CFRCs. More specifically, if the node is Sentinel, then it MUST add itself to its PositiveCFRC, as detailed previously. In addition, if its LORS is “LOCALLY DOWN”, then it MUST also add itself to its NegativeCFRC, again, as explained previously. Finally, the node MUST perform merges of its local CFRCs and the ones received in the option (see <xref target="rnfd_behavior_consensus"/>) and MAY reset its Trickle timer.</t>
</list></t>

<t>In contrast, if the node is unable to extend its local CFRCs, for example, because it lacks resources, then it MUST stop participating in RNFD, that is, until it joins a new DODAG Version, it MUST NOT send the RNFD Option and MUST ignore this option in received messages.</t>

<t>A DODAG root node can be requested to increase the bit length of its CFRCs externally, as part of the management policies (see <xref target="mgmnt_roles_and_cfrc_lens"/>).
If it cannot fulfill such a request, then it is MUST NOT stop participating in RFND and SHOULD return an error to the requester instead.
Otherwise, since it is always Acceptor, the above rules require it to extend both CFRCs to the requested length and to set them both to either zero() or infinity(), depending on whether its LORS is, respectively, different from or equal to “GLOBALLY DOWN”.
In the latter case, given the earlier rules governing the root’s behavior upon reaching the “GLOBALLY DOWN” state (cf. <xref target="rnfd_behavior_root"/>), the root is also bound to eventually set its CFRCs to zero() and, in addition, generate a new DODAG Version and change its LORS back to “UP”.
Therefore, these two steps can be optimized into one, meaning that effectively, irrespective of its LORS, when increasing the bit length of its CFRCs in response to an external request, the root also sets the CFRCs to zero().</t>

</section>
<section anchor="summary-of-rnfds-interactions-with-rpl" title="Summary of RNFD’s Interactions with RPL">

<t>In summary, RNFD interacts with RPL in the following manner:</t>

<t><list style="symbols">
  <t>While having its LORS equal to “GLOBALLY DOWN”, RNFD prevents RPL from routing packets and advertising upward routes in the corresponding DODAG (see <xref target="rnfd_behavior_consensus"/>).</t>
  <t>In some scenarios, RNFD triggers RPL to issue a new DODAG Version (see <xref target="rnfd_behavior_root"/>).</t>
  <t>Depending on the implementation, RNFD may cause RPL’s DIO Trickle timer resets (see <xref target="rnfd_behavior_consensus"/>, <xref target="rnfd_behavior_deactivation"/>, and <xref target="rnfd_behavior_cfrc_size"/>).</t>
  <t>RNFD monitors events relevant to routing adjacency maintenance as well as those affecting RPL’s DODAG parent set (see <xref target="rnfd_behavior_roles"/> and <xref target="rnfd_behavior_detection"/>).</t>
  <t>Using RNFD entails embedding the RNFD Option into link-local RPL control messages (see <xref target="msg_format"/>).</t>
</list></t>

</section>
<section anchor="rnfd_behavior_constants" title="Summary of RNFD’s Constants">

<t>The following is a summary of RNFD’s constants:</t>

<t><list style="hanging">
  <t hangText='RNFD_CONSENSUS_THRESHOLD'>
  A threshold concerning the value of fraction value(NegativeCFRC)/value(PositiveCFRC). If the value at a Sentinel or Acceptor node reaches the threshold, then the node’s LORS is set to “GLOBALLY DOWN”, which implies that consensus has been reached on the DODAG root node being down (see <xref target="rnfd_behavior_consensus"/>). The default value of the threshold is 0.51, which indicates that a majority of Sentinels must consider the root to be down to reach the consensus. In general, the higher the value the longer the detection period but the lower the risk of false positives.</t>
  <t hangText='RNFD_SUSPICION_GROWTH_THRESHOLD'>
  A threshold concerning the value of fraction value(NegativeCFRC)/value(PositiveCFRC). If the value at a Sentinel node grows at least by this threshold since the time the node’s LORS was last set to “UP”, then the node’s LORS is set to “SUSPECTED DOWN” or “LOCALLY DOWN”, which implies that the node starts suspecting or assumes a crash of the DODAG root (see <xref target="rnfd_behavior_detection"/>). The higher the value the longer the duration of detecting true crashes but the lower the risk of increased traffic due to verifying false suspicions. The default value of the threshold is 0.12, which in sparse networks (up to 8 neighbors per node) triggers a suspicion at a Sentinel node after just one other Sentinel starts considering the root as dead, while being gradually more conservative in denser networks.</t>
  <t hangText='RNFD_CFRC_SATURATION_THRESHOLD'>
  A threshold concerning the percentage of bits set to 1 in a CFRC, c. If the percentage for c is equal to or greater than this threshold, then saturated(c) returns TRUE, which hints the DODAG root to generate a new DODAG Version or increase the bit length of the CFRCs (see <xref target="rnfd_behavior_root"/>). The default value of the threshold is 0.63. The higher the value is, the higher the probability of bit collisions, and hence the more erratic the results of function value(c) may be.</t>
</list></t>

<t>The means of configuring the constants at individual nodes are outside the scope of this document.</t>

</section>
</section>
<section anchor="mgmnt" title="Manageability Considerations">

<t>RNFD is largely self-managed, with the exception of protocol activation and deactivation, as well as node role assignment and the related CFRC size adjustment, for which only the aforementioned mechanisms are defined, so as to enable adopting deployment-specific policies.
This section outlines some of the possible policies.</t>

<section anchor="mgmnt_roles_and_cfrc_lens" title="Role Assignment and CFRC Size Adjustment">

<t>One approach to node role and CFRC size selection is to manually designate specific nodes as Sentinels in RNFD, assuming that they will have chances to satisfy the necessary conditions for attaining this role (see <xref target="rnfd_behavior_roles"/>), and fixing the CFRC bit length to accommodate these nodes.</t>

<t>Another approach is to automate the selection process: in principle, any node satisfying the necessary conditions for becoming Sentinel (see <xref target="rnfd_behavior_roles"/>) can attain this role.
However, in networks where the DODAG root node has many neighbors, this approach may lead to saturated(PositiveCFRC) quickly becoming TRUE, which — without additional measures — may degrade RNFD’s performance.
This issue can be handled with a probabilistic solution: if PositiveCFRC becomes saturated with little or no increase in NegativeCFRC, then a new DODAG Version can be issued and a node satisfying the necessary conditions can become Sentinel in this version only with probability 1/2.
This process can be continued with the probability being halved in each new DODAG Version until PositiveCFRC is no longer quickly saturated.
Another solution is to increase, potentially multiple times the bit length of the CFRCs by the DODAG root if PositiveCFRC becomes saturated with little or no growth in NegativeCFRC, which does not require issuing a new DODAG Version but lengthens the RNFD Option.
In this way, again, a sufficient bit length can be dynamically discovered or the root can conclude that a given bit length is excessive for (some) nodes and resort to the previous solution.
Increasing the bit length can be done, for instance, by doubling it, respecting the condition that it has to be a prime number (see <xref target="msg_format"/>).</t>

<t>In either of the solutions, Sentinel nodes SHOULD preferably be stable themselves and have stable links to the DODAG root.
Otherwise, they may often exhibit LORS transitions between “UP” and “LOCALLY DOWN” or switches between Acceptor and Sentinel roles, which gradually saturates CFRCs.
Although as a mitigation the number of such transitions and switches per node MAY be limited, having Sentinels stable SHOULD be preferred.</t>

</section>
<section anchor="mgmnt_virt_dodag_roots" title="Virtual DODAG Roots">

<t>RPL allows a DODAG to have a so-called virtual root, that is, a collection of nodes coordinating to act as a single root of the DODAG.
The details of the coordination process are left open in the specification <xref target="RFC6550"/> but, from RNFD’s perspective, two possible realizations are worth consideration:</t>

<t><list style="symbols">
  <t>Just a single (primary) node of the nodes comprising the virtual root acts as the actual root of the DODAG. Only when this node fails, does another (backup) node take over. As a result, at any time, at most one of the nodes comprising the virtual root is the actual root.</t>
  <t>More than one of the nodes comprising the virtual root act as actual roots of the DODAG, all advertising the same Rank in the DODAG. When some of the nodes fail, the other nodes may or may not react in any specific way. In other words, at any time, more than one node can be the actual root.</t>
</list></t>

<t>In the first realization, RNFD’s operation is largely unaffected.
The necessary conditions for a node to become Sentinel (<xref target="rnfd_behavior_roles"/>) guarantee that only the current primary root node is monitored by the protocol.
This SHOULD be taken into account in the policies for node role assignment, CFRC size selection, and, possibly, the setting of the two thresholds (<xref target="rnfd_behavior_constants"/>).
Moreover, when a new primary has been elected, to avoid polluting CFRCs with observations on the previous primary, it is RECOMMENDED to issue a new DODAG Version, especially if the new primary has different neighbors compared to the old one.</t>

<t>In the second realization, the fact that the virtual root consists of multiple nodes is transparent to RNFD.
Therefore, employing RNFD is such a setting can be beneficial only if the nodes comprising the virtual root may suffer from correlated crashes, for instance, due to global power outages.</t>

</section>
</section>
<section anchor="security" title="Security Considerations">

<t>RNFD is an extension to RPL and is thus both vulnerable to and benefits from the security issues and solutions described in <xref target="RFC6550"/> and <xref target="RFC7416"/>.
Its specification in this document does not introduce new traffic patterns or new messages, for which specific mitigation techniques would be required beyond what can already be adopted for RPL.</t>

<t>In particular, RNFD depends on information exchanged in the RNFD Option.
If the contents of this option were compromised, then failure misdetection may occur.
One possibility is that the DODAG root may be falsely detected as crashed, which would result in an inability of the nodes to route packets, at least until a new DODAG Version is issued by the root.
Another possibility is that a crash of the DODAG root may not be detected by RNFD, in which case RPL would have to rely on its own mechanisms.
Moreover, compromising the contents of the RNFD Option may also lead to increased DIO traffic due to Trickle timer resets.
Consequently, RNFD deployments are RECOMMENDED to use RPL security mechanisms if there is a risk that control information might be modified or spoofed.</t>

<t>In this context, RNFD’s two features are worth highlighting.
First, unless all neighbors of a DODAG root are compromised, a false positive can always be detected by the root based on its local CFRCs.
If the frequency of such false positives becomes problematic, RNFD can be disabled altogether, for instance, until the problem has been diagnosed.
This procedure can be largely automated at LBRs.
Second, some types of false negatives can also be detected this way.
Those that pass undetected, in turn, are likely not to have major negative consequences on RPL apart from the lack of improvement to its performance upon a DODAG root’s crash, at least if RPL’s other components are not attacked as well.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>To represent the RNFD Option, IANA is requested to allocate the value TBD1 from the <eref target="https://www.iana.org/assignments/rpl/rpl.xhtml#control-message-options">“RPL Control Message Options” registry</eref> of the “Routing Protocol for Low Power and Lossy Networks (RPL)” registry group.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge Piotr Ciolkosz and Agnieszka Paszkowska.
Agnieszka contributed to deeper understanding and formally proving various aspects of RPL’s behavior upon an LBR crash.
Piotr in turn developed a prototype implementation of RNFD dedicated for RPL to verify earlier performance claims.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6206;
&RFC6550;
&RFC6553;
&RFC6554;
&RFC8174;


    </references>

    <references title='Informative References'>

&RFC4861;
&RFC5184;
&RFC6202;
&RFC7102;
&RFC7228;
&RFC7416;
<reference anchor="Iwanicki16" >
  <front>
    <title>RNFD: Routing-layer detection of DODAG (root) node failures in low-power wireless networks</title>
    <author initials="K." surname="Iwanicki" fullname="Konrad Iwanicki">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="In" value="IPSN 2016: Proceedings of the 15th ACM/IEEE International Conference on Information Processing in Sensor Networks, IEEE, pp. 1--12"/>
  <seriesInfo name="DOI" value="10.1109/IPSN.2016.7460720"/>
</reference>
<reference anchor="Ciolkosz19" >
  <front>
    <title>Integration of the RNFD Algorithm for Border Router Failure Detection with the RPL Standard for Routing IPv6 Packets</title>
    <author initials="P." surname="Ciolkosz" fullname="Piotr Ciolkosz">
      <organization></organization>
    </author>
    <date year="2019"/>
  </front>
  <seriesInfo name="Master's Thesis," value="University of Warsaw"/>
</reference>
<reference anchor="Paszkowska19" >
  <front>
    <title>Failure Handling in RPL Implementations: An Experimental Qualitative Study</title>
    <author initials="A." surname="Paszkowska" fullname="Agnieszka Paszkowska">
      <organization></organization>
    </author>
    <author initials="K." surname="Iwanicki" fullname="Konrad Iwanicki">
      <organization></organization>
    </author>
    <date year="2019"/>
  </front>
  <seriesInfo name="In" value="Mission-Oriented Sensor Networks and Systems: Art and Science (Habib M. Ammari ed.), Springer International Publishing,  pp. 49--95"/>
  <seriesInfo name="DOI" value="10.1007/978-3-319-91146-5_3"/>
</reference>
<reference anchor="Whang90" >
  <front>
    <title>A Linear-time Probabilistic Counting Algorithm for Database Applications</title>
    <author initials="K.-Y." surname="Whang" fullname="Kyu-Young Whang">
      <organization></organization>
    </author>
    <author initials="B.T." surname="Vander-Zanden" fullname="Brad T. Vander-Zanden">
      <organization></organization>
    </author>
    <author initials="H.M." surname="Taylor" fullname="Howard M. Taylor">
      <organization></organization>
    </author>
    <date year="1990"/>
  </front>
  <seriesInfo name="In" value="ACM Transactions on Database Systems"/>
  <seriesInfo name="DOI" value="10.1145/78922.78925"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAKT7oGcAA8V96XPbVpbvd/4VKOVDrA7JWPKSWHn9ahQvHU3Ly0hOp/pN
zXhAAqTQAgEOAEpm3H5/+zu/s9wFBGUl3VMvU9OmSOAu5559u5PJZDSvs6Ja
niSbbjH5fjTqiq7MT5KDizevXpwkr9K2S2Z1k+VN0tSbjv6ZN2l7lWR5l8+7
oq6Sokou3p0fjNLZrMlvThK8OMrqeZWuaJysSRfdpMhp8KYuy0lTLbLJwyej
LO3o1+OHx08mD48nDx+NRsW6OUm6ZtN2xw8fPnt4PEqbPD1JziqatMq70W3d
XC9pDWua4u35+eg639JXmX9i8gJzjeY08rJutidJ22Wj0Vf0T1plH9KyrmjG
bd6O1sVJ8u9dPR8nbd10Tb5o6dN2hQ//MRqlm+6qbk5GCf830X8T2md7kvx5
mpzdplUxvy7cD7LRP9dVk2a7v9YNwfbnqrjJm7botkm9SH5Jmza9dU+0tIS8
O0l+TKt0fpUmx+6XOb1wwo//mt6m/us6owkBtmffBV9uqg67fleXtF/3/fqK
9/3N4++T4+PkyZPk8ePk8fH3iXsgX6VFeZIUuvB/WRWrze00zzbTdTki7KBR
i9mmGwKJ7Px1QavOy+QC/zZZW1fx5i9pOXm5Sqvksl50t3SsyS90lm1/Bat5
8w0Q5V9ae2E6T0d7Jn2XtvO0TN5fbWZ508UTPi/aeZ1cbtsuX+3Msu7klX+Z
46npvF6NRlXdrNKOjghbvHj1/Pjo6Jl+fHr88Kl9fPLkof/4yH98rB+/P/qO
Po6KatEb7/H3T4/045Oj7x/7oY/143dH/uPx8ff28fERz204JX8lSUyiF0SW
RMCTMt0SdXq6JER78fbF6Z+SB01dd4dJRViTLAgGmyZvQbVlfTtZ17f00m3R
5GXetglREcisPeB5jBK+GiSFg4AWDnqnc9CjBvm9zZsibwEeQ6Wzip49e3f5
hjgB7S5519TzPAc/arH+7ipPjp50V8np89ffnr18+VJpPcUG6fSf19Uib/Jq
nie04TODO33mgVqaa4mdXuYVUXryRnc3TjDWOFmvp8nRZHJ0bMt/8fbsJDl6
OD06evjsWyxrimVNv3v89OF3xw/5IeNbR0/pz+dFXV7X7a+CLf5gsMplk9ox
YBs4q+S0JMZUdFerhFaa/Chs9ULY6is5meSFO8BbelLefXeeXIKJEXXxm3rk
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
QtYwHAZQjAP1hLTAlfjSxhKgk6xR4d1kCNXzgr+AGkB6AFwvNwWZS5++qvXj
5ztUKRfWjTSPSvwV3ikVOokr85mLa0zYJPvWk1QDk0FMwVThMK6jNnLg/HXJ
XkmzqVgjZY1psYPquXczIAvweoDYxdBGLKIyniY6fYHAASlf6jYh+X9/7Bdg
+NSyXLJB+oQQRE019K1e1MAFoqaB4soO6WCZaqlqQBD7tBd9mp2FMlzWSEBP
EmzfrNlVSCrOIWuuqw1qYsDdiU1rpLHHwNofwtXLGylzFNWGQ8dPP9SZ9YJi
UJ5r9ijBg8x7k2GxOFb2VRvCUXNOElhgVrSIhnUJ18y0JwFjxhEYf2uR3bQj
H/Zz5lhC7MaBfBZPcBQcpwmCIO2QuIDdqu7I7v6i4HSAVVsiyp0s2wFAVod4
IvvcSk4tAojghEyXwF23yK97B/daciW8RlJXHpiSpYRv+4qXGSF8rB9QnTRf
NPMPJbEttUO+8hqkkM9rBB6rXNRr5xVRNgqjmKjLPJvM/GDhmpeQEy4YW/J1
Me/MEloUyw8cwPywktE5SbJj3fvg53cHotb+6fztj2TF/JUO9Jc3B84I7jpJ
NiECmBGu70OvHyRESgNe/nz57uXz9y9f6EA8+Pnb58HYSA2l8fxQsEEIHv/X
/YdyoG8mv/e/b+jtvyeD//39rtfo90dp8nd7e3cB30TPBv89mtmE7u2/J8ez
3tzu083OuvSbm9E3Msk3PMNRsIZvdM5wVfbNN+6RESb5+Z0997+/Sfx52DeJ
nYb7xp3930dukd/8LzcDTk12lOou3DeP5vKNfRGt/3F612qHvsHJ/Se++8/h
4+vB0X3jgb7nv8ezu167C9V6J5084dd+B3J+EyH4p5Pkqx3ClLKKP3LFV6IU
Cvp574n94DPHVmb5sqg09n8reUyaDQpp4DV/p+v2pKaIKjHcSL2DgtTWPlSN
IDwpcyy4vTMGDJsZUI40ZSgFYB/TkajY4KNIlIP35NpHvTBdkNshKR3MvCWp
QoYYOZtBdiMPT1DAoHH31nNcfM3JD86pL/Jew7qyQXPri4M6E2eUOuXdRrCF
PsN64FkrEeA+Dnoo0i94lmMazE+HRmWnHqcFJKjpyCxooyZCKG84nb9wyj4n
fq/hDOinTUIkaz2gpi3RuzOkaK8KyT+/qteT2XZC/xAcTe+S/DoMZUmbmnqA
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

-->

</rfc>

